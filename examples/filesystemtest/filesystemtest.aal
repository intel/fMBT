# -*- coding: utf-8 -*-
# preview-show-vars: dir_exists
aal "filesystemtest" {
    language "python" {
        # -*- coding: utf-8 -*-
        import os
        import shutil
        import tempfile
        MOUNTPOINT = tempfile.tempdir
        DIRNAME = os.path.join( MOUNTPOINT , "fmbt.filesystemtest" )
        SUBDIRNAME = os.path.join( DIRNAME , "subdir" )
    }
    variables { dir_exists, subdir_exists }
    initial_state {
        dir_exists = False
        subdir_exists = False
    }
    adapter_init {
        try: shutil.rmtree(DIRNAME)
        except (OSError): pass
    }
    adapter_exit {
        if verdict == "pass" and dir_exists:
            log("cleaning up " + DIRNAME)
            shutil.rmtree(DIRNAME)
    }
    input "自动化组件: ok" {
        guard()   { return not dir_exists }
        adapter() { os.mkdir(DIRNAME) }
        body()    { dir_exists = True }
    }
    input "rmdir: ok" {
        guard()   { return dir_exists and not subdir_exists }
        adapter() { os.rmdir(DIRNAME) }
        body()    { dir_exists = False }
    }
    input "mksubdir: ok" {
        guard()   { return dir_exists and not subdir_exists}
        adapter() { os.mkdir(SUBDIRNAME) }
        body()    { subdir_exists = True }
    }
    input "rmsubdir: ok" {
        guard()   { return subdir_exists }
        adapter() { os.rmdir(SUBDIRNAME) }
        body()    { subdir_exists = False }
    }
    input "mkdir: already exists" {
        guard()   { return dir_exists }
        adapter() {
            try: os.mkdir(DIRNAME)
            except (OSError), e:
                assert ("File exists" in str(e) or e.winerror == 183), "Wrong exception: %s" % (e,)
                return
            assert False, "Exception expected"
        }
    }
    input "mksubdir: already exists" {
        guard()   { return subdir_exists }
        adapter() {
            try: os.mkdir(SUBDIRNAME)
            except (OSError), e:
                assert ("File exists" in str(e) or e.winerror == 183), "Wrong exception: %s" % (e,)
                return
            assert False, "Exception expected"
        }
    }
    input "rmdir: no such file" {
        guard()   { return not dir_exists }
        adapter() {
            try: os.rmdir(DIRNAME)
            except (OSError), e:
                assert ("No such file" in str(e) or e.winerror == 2), "Wrong exception %s" % (e,)
                return
            assert False, "Exception expected"
        }
    }
    input "rmdir: not empty" {
        guard()   { return subdir_exists }
        adapter() {
            try: os.rmdir(DIRNAME)
            except (OSError), e:
                assert ("not empty" in str(e) or e.winerror == 145), "Wrong exception: %s" % (e,)
                return
            assert False, "Exception expected"
        }
    }
    input "rmsubdir: no such file" {
        guard()   { return not subdir_exists }
        adapter() {
            try: os.rmdir(SUBDIRNAME)
            except (OSError), e:
                assert ("No such file" in str(e) or e.winerror == 2 or e.winerror == 3), "Wrong exception %s" % (e,)
                return
            assert False, "Exception expected"
        }
    }

    tag "dir exists" {
        guard()   { return dir_exists }
        adapter() { assert os.access(DIRNAME, os.R_OK), "%s not accessible" % (DIRNAME,) }
    }
    tag "no dir" {
        guard()   { return not dir_exists }
        adapter() { assert not os.access(DIRNAME, os.R_OK), "%s accessible" % (DIRNAME,) }
    }
    tag "subdir exists" {
        guard()   { return subdir_exists }
        adapter() { assert os.access(SUBDIRNAME, os.R_OK), "%s not accessible" % (SUBDIRNAME,) }
    }
    tag "no subdir" {
        guard()   { return not subdir_exists }
        adapter() { assert not os.access(SUBDIRNAME, os.R_OK), "%s accessible" % (SUBDIRNAME,) }
    }
}
