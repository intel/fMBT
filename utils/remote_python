#!/usr/bin/env python

# fMBT, free Model Based Testing tool
# Copyright (c) 2011, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

"""
remote_python adapter for fMBT

Usage: remote_python [options]

Options:
  -c <string>
          execute the string in the Python interpreter before starting
          executing actions. Example:
          remote_python -c 'from myteststeps import *'

  -d, --action-delay=<float>
          set minimum delay between executed actions to <float>
          seconds. By default there is no delay.

  --ignore-unknown-outputs
          observed outputs that do not match to any output actions are
          not reported (but still logged). Otherwise execution of
          unknown output action is reported.

  -L=<file>
          write (append) log to the file instead of /tmp/remote_python.log.

  -l, --log-file=<file>
          write (overwrite) log to the file instead of /tmp/remote_python.log.

  -s, --shell
          start in shell mode, reads and executes Python expressions
          from the standard input.

  -T, --self-test
          run built-in unit tests
"""

import sys
import os
import urllib
import time
import getopt

import gobject

import dbus
import dbus.mainloop.glib
import thread

import random

import subprocess
import fcntl

import compiler
import ast
import re

import traceback

import atexit

import signal

import fmbt

MAX_LINE_LENGTH=1024*1024 # bytes
MAX_LOGGED_RETURN_VALUE_LENGTH = 142

gLogFile = "/tmp/remote_python.log"

def log(msg, writeToFile=1, writeToStdout=0, writeToStderr=0):
    timestamped = fmbt.formatAdapterLogMessage(msg.rstrip())
    if writeToFile:
        fmbt._adapterlogWriter(file(gLogFile, "a"), timestamped)
    if writeToStdout:
        sys.stdout.write('l' + urllib.quote(timestamped[:-1]) + '\n')
        sys.stdout.flush()
    if writeToStderr:
        sys.stderr.write('l' + urllib.quote(timestamped[:-1]) + '\n')

def error(msg):
    global g_loop
    log("ERROR: %s" % (msg,), writeToStderr=1)
    g_loop.quit()
    sys.exit(1)

def fmbtstderr(msg):
    to_fmbt = urllib.quote("e%s" % (msg,)) + '\n'
    sys.stderr.write(to_fmbt)
    log(msg)

def warning(msg, writeToStderr=0):
    log("WARNING: %s" % (msg,), writeToStderr=writeToStderr)

def debug(msg):
    log("DEBUG: %s" % (msg,))

fuzzing_helpers = '''
rnd = random.Random(1)
def rndi(minimum, maximum):
    """returns random integer within range [x, y]"""
    global _fuzzlog
    global rnd
    retval = rnd.randint(minimum, maximum)
    _fuzzlog.append('rndi(%s, %s) == %s' % (minimum, maximum, retval))
    return retval

def rnds(minlen, maxlen, charrange):
    """returns random string of length within minlen and maxlen. The
    string contains characters within charrange[0] and charrange[1].
    Example: rnds(0,80,'az'), chs defaults to ' ~'."""
    global _fuzzlog
    global rnd
    retval = ''.join([chr(rnd.randint(ord(charrange[0]),ord(charrange[1]))) for x in xrange(random.randint(minlen, maxlen))])
    _fuzzlog.append('rnds(%s, %s, "%s") == """%s"""' % (minlen, maxlen, charrange, retval))
    return retval

def rnde(elemlist):
    """returns random element from the list"""
    global _fuzzlog
    global rnd
    retval = rnd.choice(elemlist)
    _fuzzlog.append('rnde(%s) == %s' % (elemlist, repr(retval)))
    return retval
'''

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
try: g_sessionBus = dbus.SessionBus()
except:
    g_sessionBus = None
    warning("Could not connect to the session bus.")

try: g_systemBus = dbus.SystemBus()
except:
    g_systemBus = None
    warning("Could not connect to the system bus.")

g_actions = []

g_shellMode = False
g_ioHandler = None

def executeAction():
    pass

def readActionIndex(fd):
   """actionSpec: foo(42)=='ok'"""
   line = fd.readline().strip()
   try:
       return int(line)
   except:
       error("readActionIndex: converting action index to int failed. Got: '%s'" % (line,))

class _DBusObjwTimeout:
    """
    _DBusObjwTimeout is a proxy whose method call timeouts can be parameterised
    at constructor.
    """
    def __init__(self, iface, timeout):
        self._obj           = iface.proxy_object
        self._dest          = iface.requested_bus_name
        self._objPath       = iface.object_path
        self._interfaceName = iface.dbus_interface
        self._timeout       = timeout
    def __getattr__(self, functionName):
        def proxyMethod(*args):
            try:
                signature = self._obj._introspect_method_map[
                    self._interfaceName+"."+functionName]
            except:
                signature = None
                warning("Guessing D-Bus method call signature for calling %s.%s" %
                        (self._interfaceName, functionName))
            return self._obj._bus.call_blocking(self._dest, self._objPath,
                                                self._interfaceName, functionName,
                                                signature, args, timeout=self._timeout)
        return proxyMethod

class DBusObjGetter:
    """
    DBusObjGetter implements iDBus function.
    It returns a D-Bus interface ready for method calls.
    Example:
iDBus('session','org.freedesktop.NetworkManager','/org/freedesktop/NetworkManager/Devices/eth0','org.freedesktop.NetworkManager.Devices').getProperties()
    """
    def __init__(self, *args):
        global g_systemBus, g_sessionBus
        self.cache = {}
        self.sessionBus = g_sessionBus
        self.systemBus = g_systemBus

    def __call__(self, busName, dest, objPath, interface, timeout=None):
        try:
            retval = self.cache[busName + ' ' + dest + ' ' + objPath + ' ' + interface]
        except:
            if busName == 'session': busObj = self.sessionBus
            elif busName == 'system': busObj = self.systemBus
            else: error("illegal bus name: '%s'" % (busName,))

            try: obj = busObj.get_object(dest, objPath)
            except Exception, e:
                error("could not get_object('%s', '%s'):\n    %s" % (dest, objPath, e))

            retval = dbus.Interface(obj, interface)
            self.cache[busName + ' ' + dest + ' ' + objPath + ' ' + interface] = retval

        if timeout:
            return _DBusObjwTimeout(retval, timeout)

        return retval

class DBusSignalReceiver:
    """
    DBusSignalReceiver registers receivers for D-Bus signals. When a
    signal is received, DBusSignalReceiver converts the signal into an
    output action and writes the corresponding action index to
    standard output.

    Let iDBusListen be the name of a DBusSignalReceiver instance. Then

iDBusListen('session','com.example.TestService','HelloSignal')

    registers a receiver for HelloSignal from the
    com.example.TestService interface.

    The corresponding output action for the catched signal will be

oDBusSignal('HelloSignal',arg1,arg2,...)

    Values of string arguments are in '', boolean and numerics values
    are not quoted. If exact match for this action is not found,
    matching of regexp and 'StoreAs' actions will be tested, in the
    order of their appearance in the action list.

    Regexp actions must be escaped (try re.escape()):

oDBusSignal\(\'HelloSignal\',.*\)

    and StoreAs actions must not contain regular expressions:

oDBusSignal('HelloSignal',StoreAs(var1),StoreAs(var2),'valueOfArg3')

    The last action matches all emitted HelloSignal signals where
    argument 3 equals valueOfArg3. Values of arg1 and arg2 are stored
    to variables var1 and var2 for later use in action names.
    """
    def __init__(self):
        self.numericTypes = set([
            dbus.Int16, dbus.Int32, dbus.Int64,
            dbus.UInt16, dbus.UInt32, dbus.UInt64,
            dbus.Double])

    def reportOutput(self, actionName, args):
        global g_shellMode
        global g_actions

        if g_shellMode != False:
            print actionName
            sys.stdout.flush()
            return

        try: actionIndex = g_actions.index(actionName)
        except ValueError: actionIndex = -1

        if (actionIndex == -1) and (',' in actionName):
            # actionName is not in g_actions, but there might be a
            # regexp which matches to it. Go through all strings
            # starting with oDBusSignal\(\'signalName\',
            # (Note that actions that are regular expressions must
            # be escaped properly!)
            prefix = actionName.split(',')[0]
            for i, a in enumerate(g_actions):
                if (a.startswith(re.escape(prefix)) and
                    re.match(a, actionName)):
                    actionIndex = i
                    break
                elif 'StoreAs(' in a:
                    # Change action name into a regular expression:
                    # oDBusSignal(...,StoreAs(foo),...)
                    # ->
                    # oDBusSignal(...,([^,]*),...)
                    # and try matching it to the signal.
                    # If matches, store matching value under given name.
                    # TODO: Caching action regexps would make sense.
                    varNames = re.findall('StoreAs\(([^)]*)\)', a)
                    actionRegexp = re.sub('\\\,\\\<',',(.*)',
                                          re.escape(re.sub('StoreAs\(([^)]*)\)','<',a)))
                    values = re.findall(actionRegexp, actionName)
                    if values:
                        if len(varNames) == len(values):
                            for vi, v in enumerate(varNames):
                                debug("store %s = %s" % (v, values[vi]))
                                g_dbusEvalGlobals[v] = eval(values[vi])
                        else:
                            warning("Number of StoreAs(variable)'s and values does not match on action name '%s' and regexp '%s'" % (actionName, actionRegexp))
                        actionIndex = i
                        break

        if actionIndex >= 0:
            sys.stdout.write("%s\n" % (actionIndex,))
            sys.stdout.flush()
        else:
            log("No matching action for signal " + actionName)

    def newSignalHandler(self, signalName):
        def dbusValueToStr(v):
            if type(v) in [dbus.String, dbus.ObjectPath]:
                retval = "'%s'" % (v,)
            elif type(v) in self.numericTypes:
                retval = "%s" % (v,)
            elif type(v) == dbus.Boolean:
                retval = "%s" % ("False", "True")[int(v)]
            elif type(v) == dbus.Array:
                retval = "[%s]" % (",".join([dbusValueToStr(vv) for vv in v]),)
            else:
                warning("dbusValueToStr: don't know how to convert value of type '%s' in signal '%s'" % (type(v), signalName))
                retval = "%s" % (v,)
            return retval
        def signalHandler(*args, **kwargs):
            actionName = "oDBusSignal('%s'" % (signalName,)
            for i, a in enumerate(args):
                actionName += ",%s" % (dbusValueToStr(a),)
            actionName += ")"
            self.reportOutput(actionName, args)
        return signalHandler

    def __call__(self, busName, interfaceName, signalName):
        global g_sessionBus, g_systemBus
        log("registering listening to %s:%s" % (interfaceName, signalName))
        if busName == 'session': busObj = g_sessionBus
        elif busName == 'system': busObj = g_systemBus
        else: error("illegal bus name: '%s'" % (busName,))
        busObj.add_signal_receiver(
            self.newSignalHandler(signalName),
            dbus_interface = interfaceName,
            signal_name = signalName)

class Error(object):
    """
    Allows comparing raised and expected exceptions. Example:

iDBus('system','net.connman','/','net.connman.Manager').SetProperty('foobar',2) == Error('.*Invalid property.*')
    """
    def __init__(self, arg1, arg2 = None):
        """
        Usage:
            Error(DBusException)
            Error(DBusException,'Invalid property')
            Error('Invalid property')
        """
        if type(arg1) == str:
            self._exceptionClass = None
            self._strException = arg1
        else:
            if isinstance(arg1, BaseException):
                self._exceptionClass = arg1.__class__
            else:
                self._exceptionClass = arg1
            self._strException = arg2

    def __eq__(self, other):
        if other == None:
            return False
        elif isinstance(other, Error):
            if self._exceptionClass:
                myErrorStr = '%s: %s' % (self._exceptionClass.__name__,
                                         self._strException)
                return re.match(other._strException,
                                myErrorStr) != None
            else:
                return re.match(other._strException,
                                self._strException) != None
        elif isinstance(other, Exception):
            if self._exceptionClass:
                if not isinstance(other,  self._exceptionClass):
                    return False
            if self._strException:
                strOther = str(other)
                if (self._strException != strOther and
                    not re.match(self._strException, strOther)):
                    return False
            return True
        else:
            return False

    def __cmp__(self, other):
        return False

    def __repr__(self):
        if not self._exceptionClass:
            return "Error('''%s''')" % (self._strException.replace("'","\\'"),)
        return "Error('''%s: %s''')" % (self._exceptionClass.__name__,
                                        self._strException.replace("'","\\'"))

class iCatch:
    """
    Executes Python statements and returns exceptions or None.

    Example: iCatch('first_time += 1') == Error('NameError.*')
    """
    def __init__(self, _globals):
        self._globals = _globals
    def __call__(self, codeString):
        """returns None if codeString was executed without exceptions,
        otherwise returns the exception in an Error object."""
        try:
            exec codeString.strip() in self._globals
        except Exception, e:
            return Error(e, str(e))

g_dbusEvalGlobals = {}

_g_killList = []

def _g_exitHandler():
    for p in _g_killList:
        if p.poll() == None: os.killpg(p.pid, 15)
    time.sleep(0.1)
    for p in _g_killList:
        if p.poll() == None: os.killpg(p.pid, 9)

class Shell:
    """
    Runs commands in shell.
    """
    def __init__(self):
        self._processList = []
        self._exitHandlerRegistered = False

    def __call__(self, args,
                 stdinHandler=None, stdoutHandler=None, stderrHandler=None,
                 killOnExit=False):
        """
        Run the command (given as args) in shell in child process.

        User-defined functions can be registered as handlers for
        events in stdin, stdout and stderr of the child process. These
        functions are called with two parameters: corresponding file
        object and condition (see gobject.io_add_watch callback,
        gobject.IO_*).

        If handlers are not given, data read from stdout and stderr is
        logged.

        If killOnExit==True, child process and all its children that
        belong to the same process group will be terminated and killed
        if remote_python quits normally.
        """

        popen_kwargs = {}
        if killOnExit:
            if not self._exitHandlerRegistered:
                atexit.register(_g_exitHandler)
                self._exitHandlerRegistered = True
            # In order to kill child and all its children they
            # need to run in their own process group
            popen_kwargs['preexec_fn'] = lambda: os.setpgid(0,0)

        p = subprocess.Popen(args,
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             close_fds=True,
                             shell=True,
                             **popen_kwargs)
        self._processList.append(p)

        if killOnExit:
            _g_killList.append(p)

        p.childNumber = len(self._processList)-1
        log("  Child %4s pid=%s cmd='%s'" %
            (p.childNumber, p.pid, args))

        if stdinHandler:
            gobject.io_add_watch(p.stdin,
                                 gobject.IO_ERR | gobject.IO_HUP,
                                 stdinHandler)

        if not stdoutHandler: stdoutHandler = self.readFd('stdout', p)
        gobject.io_add_watch(p.stdout,
                             gobject.IO_IN | gobject.IO_ERR | gobject.IO_HUP,
                             stdoutHandler)
        if not stderrHandler: stderrHandler = self.readFd('stderr', p)
        gobject.io_add_watch(p.stderr,
                             gobject.IO_IN | gobject.IO_ERR | gobject.IO_HUP,
                             stderrHandler)
        return p

    def readFd(self, fdName, process):
        def logOutput(fd, condition):
            outputAvailable = True

            try: line = fd.readline()
            except: outputAvailable = False
            if line == "": outputAvailable = False

            if outputAvailable:
                log("  Child %4s %s: %s"
                    % (process.childNumber, fdName, line.rstrip()))
                return True
            else:
                log("  Child %4s %s closed" %
                    (process.childNumber, fdName))
                fd.close()
                return False
        return logOutput

def leftOpRight(actionName):
    """parse Python comparison expression in actionName and return it
    in three strings: the left hand side, the operator and the right
    hand side."""
    # TODO: cache!
    fakeFilename="<actionName '%s'>" % (actionName,)
    astparsed = ast.parse(actionName, fakeFilename, "eval")
    cparsed = compiler.parse(actionName, "eval")
    operator = cparsed.node.asList()[1]
    right = actionName[astparsed.body.comparators[0].col_offset:]
    leftAndOp = actionName[:-len(right)].strip()
    op = leftAndOp[-len(operator):]
    left = leftAndOp[:-len(operator)].strip()
    return (left, op, right)

def safeEval(expression, globalsDict):
    log("    eval: '%s'" % (expression,))
    globalsDict['_fuzzlog'] = []
    try:
        return eval(expression, globalsDict)
    except Exception, e:
        return Error(e,str(e))
    finally:
        for s in globalsDict['_fuzzlog']:
            log("      with " + s)
        globalsDict['_fuzzlog'] = []

def executeString(actionName):
    global g_dbusEvalGlobals

    def findMatchingAction(actionName, left, result):
        actionWithoutComparison = None
        for otherAction in g_actions:
            if otherAction == left:
                actionWithoutComparison = otherAction
                continue
            if otherAction == actionName: continue
            try: otherLeft, otherOp, otherRight = leftOpRight(otherAction)
            except: continue
            if otherLeft == left:
                rv = safeEval(repr(result) + " " + otherOp + " " + otherRight, g_dbusEvalGlobals)
                if rv == True:
                    return otherAction
                if rv != False:
                    warning("    non-boolean evaluation output: %s" % (rv,))
        if actionWithoutComparison and type(result) != Error:
            return actionWithoutComparison
        return None # no matching action found

    resultIncluded = 1
    try: left, op, right = leftOpRight(actionName)
    except: resultIncluded = 0

    if resultIncluded:
        # actionName includes a return value.
        # Evaluate the left hand side and compare the
        # result with all valid values.
        result = safeEval(left, g_dbusEvalGlobals)
        if safeEval(repr(result) + " " + op + " " + right, g_dbusEvalGlobals) == True:
            return actionName
        else:
            otherAction = findMatchingAction(actionName, left, result)
            if otherAction:
                return otherAction
            # There is no matching action in the list.
            # Return a new action name
            return left + ' == ' + str(result)
    else:
        # There's no constraint for the result in the action name
        result = safeEval(actionName, g_dbusEvalGlobals)
        if type(result) == Error:
            otherAction = findMatchingAction(actionName, actionName, result)
            if otherAction:
                return otherAction
            else:
                return actionName + ' == ' + str(result)
        if result != 'None':
            log("    unreported return value: %s" % (
                    str(result)[:MAX_LOGGED_RETURN_VALUE_LENGTH],))
        resultActionName = actionName
    return resultActionName

class AdapterIO:
    """
    AdapterIO implements the adapter protocol:

    1. stateReadNumberOfActions:
       read number of actions (#a) from stdin
       when done, move to state 2

    2. stateReadActionTable
       read action names from stdin (read #a lines) from stdin
       when all read, move to state 3

    3. stateExecute:
       3.1 read action to be executed from stdin
       3.2 print number of synchronously executed action to stderr
       3.3 print numbers of asynchronous actions to stdout
       never leave this state
    """
    def __init__(self, delayBetweenActions):
        self._lastExecutionTime = time.time()
        self._delayBetweenActions = delayBetweenActions
        self._state = self.stateReadNumberOfActions
        self._nonblock_buffer = ""

        fl = fcntl.fcntl(sys.stdin, fcntl.F_GETFL)
        fcntl.fcntl(sys.stdin, fcntl.F_SETFL, fl | os.O_NONBLOCK)

        gobject.io_add_watch(sys.stdin,
                             gobject.IO_IN | gobject.IO_ERR | gobject.IO_HUP,
                             self.readInput)

    def _nonblock_readline(self, fd):
        while 1:
            try: s = fd.read(1024)
            except: break
            if s != '': self._nonblock_buffer += s
            else: break
            if len(self._nonblock_buffer)>MAX_LINE_LENGTH:
                error("MAX_LINE_LENGTH exceeded.")
                break
        retval = ""
        if '\n' in self._nonblock_buffer:
            retval, self._nonblock_buffer = self._nonblock_buffer.split('\n',1)
            retval += '\n'
        return retval

    def readInput(self, fd, condition):
        line = self._nonblock_readline(fd)
        if condition != gobject.IO_IN or line == '':
            log("AdapterMode.readInput: cannot read stdin.")
            g_loop.quit()
        while line:
            self._state(line)
            line = self._nonblock_readline(fd)
        return True

    def stateReadNumberOfActions(self, inputline):
        ignore = False
        try: self._numberOfActions = int(inputline.strip())
        except: ignore = True
        if ignore or self._numberOfActions <= 0:
            warning('Input ignored. Expected number of actions > 0.')
            return

        self._numberOfReadActions = 0
        self._state = self.stateReadActionTable
        debug("Num of actions to be read: %s" % (self._numberOfActions,))

    def stateReadActionTable(self, inputline):
        global g_actions
        actionName = urllib.unquote(inputline.strip())
        g_actions.append(actionName.strip())
        self._numberOfReadActions += 1
        if self._numberOfActions <= self._numberOfReadActions:
            self._state = self.stateExecute

        debug("Action %s/%s: '%s'" %
              (self._numberOfReadActions, self._numberOfActions, g_actions[-1]))

    def executionDelay(self):
        if self._delayBetweenActions <= 0:
            return
        timeToWait = (self._lastExecutionTime + self._delayBetweenActions) - time.time()
        if timeToWait > 0:
            time.sleep(timeToWait)

    def stateExecute(self, inputline):
        global g_actions
        global g_loop

        ignore = False
        try: actionIndex = int(inputline.strip())
        except: ignore = True

        if ignore == False and actionIndex >= len(g_actions): ignore = True

        if ignore:
            warning('Input ignored. Expected integer 0..%s, got "%s".' %
                    (len(g_actions) - 1, inputline,))
            return

        self.executionDelay()

        log("Executing %4s: '%s'" % (actionIndex, g_actions[actionIndex]))
        executedActionName = executeString(g_actions[actionIndex])
        self._lastExecutionTime = time.time()

        try:
            executedActionIndex = g_actions.index(executedActionName)
            sys.stderr.write(str(executedActionIndex) + '\n')
        except ValueError:
            fmbtstderr('remote_python: no actions corresponding to observed execution:\n"%s"' %
                        (executedActionName,))
            sys.stderr.write('0\n')

class InteractiveShellIO:
    def __init__(self):
        global g_dbusEvalGlobals
        import code
        self.interpreter = code.InteractiveConsole()
        self.interpreter.locals = g_dbusEvalGlobals
        self.promptReady = ">>> "
        self.promptNeedMore = "... "
        gobject.io_add_watch(sys.stdin,
                             gobject.IO_IN | gobject.IO_ERR| gobject.IO_HUP,
                             self.readInput)
        self.printPrompt(self.promptReady)

    def printPrompt(self, prompt):
        sys.stderr.write('%s' % (prompt,))

    def readInput(self, fd, condition):
        try: line = fd.readline()
        except: line = ''

        if line == '':
            g_loop.quit()
            return True

        needMore = self.interpreter.push(line.rstrip())
        if needMore: self.printPrompt(self.promptNeedMore)
        else: self.printPrompt(self.promptReady)
        sys.stdout.flush()
        return True

def reportOutput(action_name):
    try:
        action_number = g_actions.index(action_name)
        log('reporting output %s ("%s")' % (action_number, action_name))
    except:
        action_number = 0
        if opt_ignore_unknown_outputs:
            log('ignoring unknown output "%s", nothing reported.' % (action_name,))
            return
        else:
            log('reporting unknown output "%s"' % (action_name,))
    sys.stdout.write("%s\n" % (action_number,))
    sys.stdout.flush()

def self_test():
    global g_dbusEvalGlobals
    global g_actions
    PASS, FAIL = "pass", "fail"

    verdict, test = FAIL, "Catch matching errors"
    try:
        actionName = "iCatch('a+=2')==Error('NameError:.*')"
        if actionName == executeString(actionName):
            verdict = PASS
    finally: print verdict, test

    verdict, test = FAIL, "Don't catch non-matching errors"
    try:
        actionName = "iCatch('b+=2')==Error('ValueError:.*')"
        if actionName != executeString(actionName):
            verdict = PASS
    finally: print verdict, test

    verdict, test = FAIL, "Evaluating three operators, varying white space"
    try:
        g_actions = [ "iCatch('''a=0''')==None",
                      "iCatch('''a+=1''')==None",
                      "a + 1<2",
                      "a + 1 == 2",
                      "a + 1  >=  2 " ]
        # set and verify a = 1
        assert executeString(g_actions[0]) == g_actions[0]
        assert executeString(g_actions[2]) == g_actions[2]
        assert executeString(g_actions[3]) == g_actions[2]
        assert executeString(g_actions[4]) == g_actions[2]
        # set and verify a = 2, note that both 3 and 4 are true
        assert executeString(g_actions[1]) == g_actions[1]
        assert executeString(g_actions[2]) == g_actions[3]
        assert executeString(g_actions[3]) == g_actions[3]
        assert executeString(g_actions[4]) == g_actions[4]
        # set and verify a = 3
        assert executeString(g_actions[1]) == g_actions[1]
        assert executeString(g_actions[2]) == g_actions[4]
        assert executeString(g_actions[3]) == g_actions[4]
        assert executeString(g_actions[4]) == g_actions[4]
        verdict = PASS
    finally: print verdict, test

    return 0 # end of self_test

def signal_handler(signal, frame):
        log('User requested terminating with Ctrl-C')
        sys.exit(0)

if __name__ == "__main__":

    selfTest = False
    shellMode = False
    delay = 0
    pre_exec_statements = []
    opt_ignore_unknown_outputs = False

    opts, remainder = getopt.getopt(
        sys.argv[1:], 'Vc:hsTd:L:l:',
        ['version', 'help', 'shell', 'self-test',
         'action-delay=', 'log-file=',
         'ignore-unknown-outputs'])

    for opt, arg in opts:
        if opt in ['-c']:
            pre_exec_statements.append(arg)
        elif opt in ['-h', '--help']:
            print __doc__
            sys.exit(0)
        elif opt in ['-V', '--version']:
            try:
                import fmbt_config
                print "Version " + fmbt_config.fmbt_version + fmbt_config.fmbt_build_info
            except:
                print "Version N/A"
            sys.exit(0)
        elif opt in ['-s', '--shell']:
            shellMode = True
        elif opt in ['-T', '--self-test']:
            selfTest = True
        elif opt in ['-d', '--action-delay']:
            delay = float(arg)
        elif opt in ['-L']:
            gLogFile = arg
        elif opt in ['-l', '--log-file']:
            gLogFile = arg
            file(gLogFile, "w").close()
        elif opt == '--ignore-unknown-outputs':
            opt_ignore_unknown_outputs = True
        else:
            print __doc__
            error('Unknown option: "%s"' % (opt,))

    gobject.threads_init()
    g_dbusEvalGlobals = {
        'iDBus': DBusObjGetter(),
        'iDBusListen': DBusSignalReceiver(),
        'iShell': Shell(),
        'Error': Error,
        'DBusException': dbus.DBusException,
        'dbus': dbus,
        're':   re,
        'time': time,
        'sys':  sys,
        'os':   os,
        'random': random,
        'actions': g_actions,
        '_fuzzlog': [],
        'log': lambda msg: log(msg),
        'fmbtlog': lambda msg, flush=True: log(msg, writeToFile = 0, writeToStderr = 1),
        'iReportOutput': reportOutput
        }
    g_dbusEvalGlobals['iCatch'] = iCatch(g_dbusEvalGlobals)
    exec fuzzing_helpers in g_dbusEvalGlobals
    exec "sys.path.append(''); sys.path.append(os.getcwd())" in g_dbusEvalGlobals

    # If user code import fmbt library for logging, make sure it will
    # use the logging functions provided in this module
    exec "import fmbt" in g_dbusEvalGlobals
    exec "fmbt.fmbtlog = fmbtlog" in g_dbusEvalGlobals
    exec "fmbt.adapterlog = log" in g_dbusEvalGlobals
    exec "fmbt.reportOutput = iReportOutput" in g_dbusEvalGlobals

    if selfTest:
        sys.exit(self_test())

    g_loop = gobject.MainLoop()

    for statement in pre_exec_statements:
        try:
            log("Executing command line argument '%s'" % statement)
            exec statement in g_dbusEvalGlobals
        except Exception, e:
            fmbtstderr('Exception from command line argument "%s":\n%s' %
                       (statement, traceback.format_exc()))
            error("No exceptions allowed, got '%s'\n%s" % (e, traceback.format_exc()))

    if shellMode:
        print "fMBT remote_python adapter interactive shell."
        print "Docs on built-in helpers:"
        print "help(iCatch), help(iShell), help(iDBus), help(iDBusListen)"
        sys.stdout.flush()
        g_ioHandler = InteractiveShellIO()
    else:
        g_ioHandler = AdapterIO(delay)

    signal.signal(signal.SIGINT, signal_handler)

    log("entering main loop")
    g_loop.run()
