#!/usr/bin/env python
#
# fMBT, free Model Based Testing tool
# Copyright (c) 2013, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

"""
fMBT coverage sharing for parallel test runs

This program creates shared coverage sessions and shares coverage data
in a session. All fMBT instances connected to the same coverage
session share their coverage data. Coverage data is shared via
standard input and output. There is a separate server process for each
session.

Usage: fmbt-trace-share [options]

Options:
  -h      print help.

  -k, --keep-session
          do not kill the session server when last client exits.

  -l, -L, --log-file <filename>
          write session server log to filename. -l, --log-file
          overwrites existing log, -L appends to it. If session server
          is already running, this option has no effect. The server
          does not log by default.

  -s, --session <id>
          connect to session <id> (id is a natural number), the
          default is 0. If there is no server for the session, it will
          be automatically launched.

  -S, --session-server
          launch session server. Does not share coverage data.

  -V, --version
          print version number and exit.

Usage example in fMBT test configuration:

  coverage = shared(ssh user@host "fmbt-trace-share", perm(2))
"""

import getopt
import os
import Queue
import signal
import socket
import subprocess
import sys
import thread
import time
import urllib

FORWARD_BLOCKSIZE = 4096

opt_debug                        = False
opt_fork_server                  = False
opt_keep_running_without_clients = False
opt_log_filename                 = None
opt_overwrite_logfile            = False
opt_session_id                   = 0

server_port = 10277

def close(*args):
    for a in args:
        try:
            a.close()
        except (socket.error, IOError):
            pass

def run_client(port, from_fmbt, to_fmbt):
    """
    Client only connects to server and forwards stdin/stdout to/from
    server.
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect(("localhost", port))
    except socket.error:
        return False

    dead_threads = Queue.Queue()

    def forward_everything(from_file, to_file):
        while 1:
            data = from_file.readline()
            if len(data) == 0:
                break
            try:
                to_file.write(data)
                to_file.flush()
            except socket.error:
                break
        dead_threads.put("me")

    from_server = s.makefile("r")
    to_server = s.makefile("w")

    thread.start_new_thread(forward_everything, (from_fmbt, to_server))
    thread.start_new_thread(forward_everything, (from_server, to_fmbt))
    dead_threads.get()
    close(from_server, to_server, s, from_fmbt, to_fmbt)
    return True

def server_log(msg):
    if opt_log_filename != None:
        file(opt_log_filename, "a+").write("%.3f session %s %s\n" %
                                           (time.time(), opt_session_id, msg))

def recv_quoted_lines(f):
    """returns list of strings, None if failed"""
    # protocol:
    # number of lines (integer)
    # <number of lines> * urlencoded line
    try:
        number_of_lines = int(f.readline().strip())
    except ValueError:
        return None
    lines = []
    for _ in xrange(number_of_lines):
        lines.append(urllib.unquote(f.readline().strip()))
    return lines

def format_execution(action_number, tag_numbers):
    return "(%s,%s)" % (action_number, " ".join([str(n) for n in tag_numbers]))

def parse_execution(reported_line):
    """
    parse (act, tag1 tag2, ...)
    returns pair action_number, tuple-of-tag-numbers, or None on parse error"""
    try:
        l = reported_line.replace('(','').replace(')','')
        if l.strip() == "": return None
        action_number = int(l.split(',')[0])
        if action_number < 0: return None
        tag_numbers = [int(t) for t in l.split(',')[1].strip().split()]
        return action_number, tag_numbers
    except (IndexError, ValueError), e:
        server_log('parse error on execution report: "%s" (%s)' % (reported_line, e))
        return None

def convert_action(action_name, to_client):
    """return action_number for to_client, or None"""
    return client_a2i[to_client].get(action_name, None)

def convert_tag(tag_name, to_client):
    """return tag_number for to_client, or None"""
    return client_t2i[to_client].get(tag_name, None)

def valid_execution(client_id, parsed_execution):
    try:
        action_number, tag_numbers = parsed_execution
    except ValueError:
        server_log("cannot split to action_number, tag_numbers: %s" %
                   (parsed_execution,))
    if client_id in client_i2a and client_id in client_i2t:
        if action_number in client_i2a[client_id]:
            for tag_number in tag_numbers:
                if not tag_number in client_i2t[client_id]:
                    server_log("invalid tag %s in client %s execution %s" %
                               (tag_number, client_id, parsed_execution))
                    return False
            return True
        else:
            server_log("invalid action %s in client %s execution %s" %
                       (action_number, client_id, parsed_execution))
    else:
        server_log("invalid client %s in execution %s" %
                   (client_id, parsed_execution))
    return False

def queue_for_sharing(from_client, to_clients, parsed_execution):
    action_number, tag_numbers = parsed_execution
    action_name = client_i2a[from_client][action_number]
    tag_names = [client_i2t[from_client][n] for n in tag_numbers]

    for to_client in to_clients:
        # not queueing for self
        if to_client == from_client: continue

        to_client_action = convert_action(action_name, to_client)
        # not queueing for clients who don't know action_name
        if to_client_action == None: continue

        # queue only tags known by to_client
        to_client_tags = []
        for tag_name in tag_names:
            to_client_tag = convert_tag(tag_name, to_client)
            if to_client_tag != None:
                to_client_tags.append(to_client_tag)

        # make sure there is a send queue for actions from this client
        if not from_client in client_unsent[to_client]:
            client_unsent[to_client][from_client] = []

        # queue for sending
        client_unsent[to_client][from_client].append(format_execution(to_client_action, to_client_tags))

def queue_executions_so_far(to_client, executions_so_far):
    client_ids = sorted(executions_so_far.keys())
    for from_client in client_ids:
        for parsed_execution in executions_so_far[from_client]:
            queue_for_sharing(from_client, [to_client], parsed_execution)

def send_queued(unsent, to_file):
    from_clients = sorted(unsent.keys())
    send_clients = []
    send_executed = []
    for from_client in from_clients:
        if unsent[from_client]:
            send_clients.append(str(from_client))
            send_executed.append("(%s)\n" % ",".join([f_e for f_e in unsent[from_client]]))
    try:
        to_file.write("(%s)\n" % (" ".join(send_clients),))
        to_file.write("".join(send_executed))
        to_file.flush()
    except socket.error:
        pass

clients         = set()
client_executed = {}   # client_id => list of actions
client_a2i      = {}   # client_id => { action_name => action_number }
client_i2a      = {}   # client_id => { action_number => action_name }
client_t2i      = {}   # client_id => { tag_name => tag_number }
client_i2t      = {}   # client_id => { tag_number => tag_name }
client_unsent   = {}   # client_id => { executed_client_id => list_of_strings }
all_executions  = {}   # executed_client_id => list_of_strings
next_client_id  = 1
client_lock = thread.allocate_lock()
def serve_connection(conn):
    global next_client_id
    with client_lock:
        client_id = next_client_id
        next_client_id += 1
        clients.add(client_id)
        server_log("new client %s" % (client_id,))

    try:
        to_fmbt = conn.makefile("w")
        from_fmbt = conn.makefile("r")

        actions = recv_quoted_lines(from_fmbt)
        server_log("client %s actions: %s" %
                   (client_id, actions))
        assert type(actions) == list

        tags = recv_quoted_lines(from_fmbt)
        server_log("client %s tags: %s" %
                   (client_id, tags))
        assert type(tags) == list

        with client_lock:
            client_a2i[client_id] = {}
            client_i2a[client_id] = {}
            for i, a in enumerate(actions):
                client_a2i[client_id][a] = i
                client_i2a[client_id][i] = a

            client_t2i[client_id] = {}
            client_i2t[client_id] = {}
            for i, t in enumerate(tags):
                client_t2i[client_id][t] = i
                client_i2t[client_id][i] = t

            client_unsent[client_id] = {}
            all_executions[client_id] = []
            queue_executions_so_far(client_id, all_executions)
            unsent = client_unsent[client_id]
            client_unsent[client_id] = {}

        send_queued(unsent, to_fmbt)

        while 1:
            reported_line = from_fmbt.readline()
            if len(reported_line) == 0:
                break
            parsed_execution = parse_execution(reported_line.strip())
            if parsed_execution != None:
                if valid_execution(client_id, parsed_execution):
                    with client_lock:
                        all_executions[client_id].append(parsed_execution)
                        queue_for_sharing(client_id, client_unsent.keys(), parsed_execution)
            with client_lock:
                unsent = client_unsent[client_id]
                client_unsent[client_id] = {}
            send_queued(unsent, to_fmbt)

    finally:
        server_log("client %s left" % (client_id,))
        close(to_fmbt, from_fmbt, conn)

        with client_lock:
            clients.remove(client_id)
            for d in (client_a2i, client_t2i, client_unsent):
                if client_id in d:
                    del d[client_id]

        if not opt_keep_running_without_clients:
            with client_lock:
                if len(clients) == 0:
                    os.kill(os.getpid(), signal.SIGHUP)

def fork_server(port):
    if opt_overwrite_logfile and opt_log_filename:
        file(opt_log_filename, "w").close()

    if opt_log_filename:
        output_filename = opt_log_filename
    else:
        output_filename = "/dev/null"

    if opt_debug == False:
        # The usual fork magic, cleaning up all connections to the parent process
        if os.fork() > 0:
            return
        os.chdir("/")
        os.umask(0)
        os.setsid()

        if os.fork() > 0:
            sys.exit(0)
        try:
            sys.stdout.flush()
            sys.stderr.flush()
        except (IOError, ValueError):
            pass
        _in = file("/dev/null", 'r')
        _out = file(output_filename, 'a+')
        _err = file(output_filename, 'a+', 0)
        os.dup2(_in.fileno(), sys.stdin.fileno())
        os.dup2(_out.fileno(), sys.stdout.fileno())
        os.dup2(_err.fileno(), sys.stderr.fileno())

    server_log("launching session %s server at port %s pid %s" % (opt_session_id, server_port, os.getpid()))

    # Start listening to the port
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    bind_host_name = "127.0.0.1" # only accept local connections
    s.bind((bind_host_name, port))
    s.listen(4)
    while 1:
        conn, _ = s.accept()
        thread.start_new_thread(serve_connection, (conn,))

def error(msg):
    sys.stderr.write("%s\n" % (msg,))
    sys.exit(1)

if __name__ == "__main__":

    opts, remainder = getopt.gnu_getopt(
        sys.argv[1:], 'dhkl:L:s:SV',
        ["help", "keep-session",
         "log-file=", "session=", "session-server", "version"])

    for opt, arg in opts:
        if opt in ["-d", "--debug"]:
            opt_debug = True
        elif opt in ["-h", "--help"]:
            print __doc__
            sys.exit(0)
        elif opt in ["-k", "--keep-session"]:
            opt_keep_running_without_clients = True
        elif opt in ["-l", "-L", "--log-file"]:
            opt_log_filename = arg
            if opt != "-L":
                opt_overwrite_logfile = True
        elif opt in ["-s", "--session"]:
            try:
                opt_session_id = int(arg)
                assert server_port < server_port + opt_session_id < 65535
                server_port += opt_session_id
            except (AssertionError, ValueError):
                error('Invalid id "%s", must be in range 0..%s' % (arg, 65535-server_port))
        elif opt in ["-S", "--session-server"]:
            opt_fork_server = True
        elif opt in ['-V', '--version']:
            try:
                import fmbt_config
                print "Version " + fmbt_config.fmbt_version + fmbt_config.fmbt_build_info
            except:
                print "Version N/A"
            sys.exit(0)

    if opt_fork_server:
        fork_server(server_port)
    else:
        if not run_client(server_port, sys.stdin, sys.stdout):
            subprocess.Popen(["python"] + sys.argv + ["--session-server"], shell=False)
            time.sleep(1)
            if not run_client(server_port, sys.stdin, sys.stdout):
                sys.exit(1)
