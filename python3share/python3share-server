#!/usr/bin/env python3
# fMBT, free Model Based Testing tool
# Copyright (c) 2013-2019, Intel Corporation.
#
# Author: antti.kervinen@intel.com
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

# This executable launches pythonshare servers.

"""Pythonshare server - shared persistent distributed namespaces

Usage: pythonshare-server [options]

General options:
  -d, --debug
          Start server in debug mode. Does not fork daemon, writes
          log to standard output.

  -D, --debug-limit=SIZE
          Set maximum size (in characters) for debug messages that are
          logged. -1 is unlimited. The default is 240.

  -h, --help
          Print help.

  -l, --log=filename
          Write log to filename.

  -p, --port=number
          Listen to TCP/IP port number. Only local connections to this
          port are allowed by default. The default port is 8089. If
          "stdin" is given, the server will handle stdin/out as a client
          client connection.

  --password=password
          Require password from clients. The password can be plain text,
          or of format <algorithm>:<hexdigest>, for example
          md5:a1d0c6e83f027327d8461063f4ac58a6.

  --password-file=filename
          Require password (given in filename) from clients. See
          --password for supported formats.

  --interface=all
          Listen to TCP/IP connections from all network interfaces.
          The default is to listen to only local connections.
          WARNING: allows remote code execution on the host!

Options for namespaces:
  -n, --namespace=ns
          Following export, import and init will be done on namespace
          ns.

  -E, --export-to=hostspec
          Connect to pythonshare-server via hostspec, export local
          namespace ns to that server. Hostspec syntax is
          [password@]hostaddr[:port].

  -I, --import-from=hostspec
          Connect to pythonshare-server via hostspec, import namespace
          ns available on that server to this server.

  -i, --init=python-code
          Execute python-code in namespace ns.

  -w, --whitelist-local=ns[,ns...]
          Whitelist local namespaces. Other than mentioned local
          namespaces will not be registered.
"""

import python3share
import getopt
import hashlib
import sys
import tempfile
import os

opt_bind_host = "127.0.0.1" # allow only local connections by default
opt_bind_port = python3share.default_port
opt_debug = False
opt_debug_limit = None
opt_log_fd = None
opt_log_filename = None
opt_namespace = None
opt_conn_opts = {}

# ("import|export|init", namespace, host-port|code)
opt_init_import_export = []

def error(msg, exit_status=1):
    sys.stderr.write("pythonshare-server: %s\n" % (msg,))
    sys.exit(1)

def _parse_password(password_spec):
    """
    password_spec ::= plaintext-password
                    | "md5:" password-md5-hexdigest
                    | "sha1:" password-sha1-hexdigest
                    ... (see what is supported by hashlib)
    Returns pair: algorithm, password.
    """
    if ":" in password_spec:
        algorithm, password = password_spec.split(":", 1)
        if algorithm != "plaintext" and not hasattr(hashlib, algorithm):
            error(("invalid password algorithm. Supported formats:"
                   "<plaintext|%s>:password") %
                  "|".join(hashlib.algorithms))
    else:
        algorithm, password = "plaintext", password_spec
    return algorithm, password

if __name__ == "__main__":
    try:
        opts, remainder = getopt.gnu_getopt(
            sys.argv[1:], "dD:hp:n:E:I:i:l:w:",
            ["debug", "debug-stdout=", "debug-limit=", "help", "port=", "log=",
             "namespace=", "init=", "export-to=", "import-from=",
             "password=", "password-file=", "interface=",
             "whitelist-local="])
    except getopt.GetoptError as e:
        error(e)

    if len(remainder) > 0:
        error('unknown arguments: "%s"' % ('", "'.join(remainder)))

    for opt, arg in opts:
        if opt in ["-d", "--debug"]:
            opt_debug = True
        elif opt in ["-D", "--debug-stdout", "--debug-limit"]:
            try:
                opt_debug_limit = int(arg)
            except ValueError:
                error('invalid debug message length: "%s"' % (arg,))
        elif opt in ["-h", "--help"]:
            print (__doc__)
            sys.exit(0)
        elif opt in ["-n", "--namespace"]:
            opt_namespace = arg
        elif opt in ["-E", "--export-to"]:
            if opt_namespace == None:
                error('undefined namespace for exporting to %s, '
                      'give --namespace first' % (arg))
            opt_init_import_export.append(["export", opt_namespace, arg])
        elif opt in ["-I", "--import-from"]:
            if opt_namespace == None:
                error('undefined namespace for import from %s, '
                      'give --namespace first' % (arg))
            opt_init_import_export.append(["import", opt_namespace, arg])
        elif opt in ["-i", "--init"]:
            if opt_namespace == None:
                error('undefined namespace for init, give --namespace first')
            opt_init_import_export.append(["init", opt_namespace, arg])
        elif opt in ["-w", "--whitelist-local"]:
            opt_conn_opts["whitelist_local"] = [
                ns.strip() for ns in arg.split(",")]
        elif opt in ["-l", "--log"]:
            try:
                log_file = open(arg, "w")
            except IOError as e:
                error('cannot open log file "%s" for writing. (%s)' % (arg, e))
            opt_log_fd = log_file.fileno()
        elif opt in ["-p", "--port"]:
            try:
                opt_bind_port = int(arg)
            except ValueError:
                if arg == "stdin":
                    opt_bind_port = "stdin"
                else:
                    error('invalid port "%s", integer or "stdin" expected.' % (arg,))
        elif opt in ["--password"]:
            password_type, password = _parse_password(arg)
            opt_conn_opts["password." + password_type] = password
        elif opt in ["--password-file"]:
            try:
                password_type, password = _parse_password(open(arg).read().strip())
            except IOError as err:
                error('error reading password file "%s": %s' % (arg, err))
            opt_conn_opts["password." + password_type] = password
        elif opt in ["--interface"]:
            if arg == "all":
                opt_bind_host = ""
            else:
                opt_bind_host=arg
        else:
            error('no behaviour specified for: "%s"' % (opt,))

    # Validate arguments
    if opt_bind_host == "":
        # Binding global interface => password must be given
        if not [pkey for pkey in opt_conn_opts.keys()
                if pkey.startswith("password.")]:
            error('password required when listening to all network interfaces')

    python3share.server.start_daemon(
        host = opt_bind_host,
        port = opt_bind_port,
        debug = opt_debug,
        log_fd = opt_log_fd,
        ns_init_import_export = opt_init_import_export,
        conn_opts = opt_conn_opts,
        debug_limit = opt_debug_limit)
